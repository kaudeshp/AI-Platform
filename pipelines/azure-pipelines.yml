# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, TAG images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

pool:
  vmImage: "Ubuntu-16.04"

variables:
  Docker.registry: "$(Docker.registry)"
  Docker.server: "$(Docker.registry).azurecr.io"
  Docker.image: "$(Docker.server)/ai2ai/ux:$(TAG)"
  TAG: "$(Build.BuildNumber)"
  MONGODB_URI: "$(MONGODB_URI)"

steps:
  - script: |
      cd ai-ui
      echo -n "MONGODB_URI=$(MONGODB_URI)" > ".env"
      yarn install --ignore-scripts --no-optional --frozen-lockfile
      yarn build:final
    displayName: "build app"

  # -
  #  task: Docker@0
  #  inputs: 
  #     command: build
  #     addDefaultLabels: true
  #     azureContainerRegistry: $(Docker.server)
  #     azureSubscriptionEndpoint: "arm-connection-rg-acr"
  #     context: $(System.DefaultWorkingDirectory)/ai-ui
  #     defaultContext: false
  #     dockerFile: ai-ui/Dockerfile
  #     imageName: $(Docker.image)
  #     includeLatestTag: false
  #     includeSourceTags: true
  #     qualifyImageName: true
  #     workingDirectory: $(System.DefaultWorkingDirectory)/ai-ui
  #  displayName: "Build image $(Docker.image)"

  -
    task: Docker@0
    inputs:
      command: push
      action: "Push image $(Docker.image)"
      addDefaultLabels: true
      azureContainerRegistry: $(Docker.server)
      azureSubscriptionEndpoint: "arm-connection-rg-acr"
      context: $(System.DefaultWorkingDirectory)/ai-ui
      defaultContext: false
      dockerFile: ai-ui/Dockerfile
      imageName: $(Docker.image)
      includeLatestTag: false
      includeSourceTags: true
      qualifyImageName: true
      workingDirectory: $(System.DefaultWorkingDirectory)/ai-ui
    displayName: "Push Image to $(Docker.server) registry"

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: "build-final"
      targetPath: "ai-ui/build-final"
